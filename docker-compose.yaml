services:
  frontend:
    image: oldrick/tca-frontend
    depends_on:
      - projects
    ports:
      - "9000:80"
    networks:
      - my-network



  gateway:
    image: oldrick/api-gateway
    depends_on:
      - projects
    ports:
      - "8000:8080"
    networks:
      - my-network
    environment:
      URI_PROJECTS_SERVICE: http://projects:8080/

  mongodb:
    image: mongo:7.0.5
    container_name: mongodb
    ports:
      - "27017:27017"
    networks:
      - my-network
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: projects
    volumes:
      - ./../data:/data/db

  projects:
    image: oldrick/projects  # Replace with your Spring Boot Docker image
    depends_on:
      - mongodb
      - rabbitmq
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://root:password@mongodb:27017/projects?authSource=admin
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
    ports:
      - "8091:8080"
    networks:
      - my-network

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - my-network
    healthcheck:
      test: [ "CMD-SHELL", "rabbitmqctl status" ]
      interval: 10s
      timeout: 10s
      retries: 10

  email:
    image: oldrick/mail-service
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=guest
      - SPRING_RABBITMQ_PASSWORD=guest

    networks:
      - my-network
    restart: always

networks:
  my-network:
    driver: bridge
