import React, { useEffect, useRef} from 'react';

const Globe = ({ markers, onMarkerClick }) => {

  // Todo: This component works, but the entire Cesium viewer is re-rendered on each click on a marker. This causes bad performance. Leaving it for now so that I can focus on connecting to backend. 
  // Todo: Idea: Selected marker should turn another color so you can easily see which one is selected. 

  const markersRef = useRef([]);

  useEffect(() => {
    console.log("called")

    Cesium.Ion.defaultAccessToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJlNDZhMGYyZC1hMDUyLTQ1N2YtODBiZS04MzVjODA3NDE5NDIiLCJpZCI6MjQxOTY2LCJpYXQiOjE3MjY0OTgyNzV9.ZcYZvleQxn5WTqVQBCbfbqXVRhINOF-kj34AmIlcWsU';

      // Initialize Cesium viewer
      const viewer = new Cesium.Viewer('cesiumContainer', {
        imageryProvider: new Cesium.OpenStreetMapImageryProvider({
          url: 'https://a.tile.openstreetmap.org/'
        }),
        baseLayerPicker: false,  
        terrainProvider: Cesium.createWorldTerrain(),
        

      });

      viewer.animation.container.style.display = 'none';



      //   // Update markers
      // const existingMarkers = markersRef.current;

      // // Clear existing markers
      // existingMarkers.forEach(entity => viewer.entities.remove(entity));


      // Add markers to the Cesium globe
      markers.forEach(marker => {
        const entity = viewer.entities.add({
          position: Cesium.Cartesian3.fromDegrees(marker.location.lng, marker.location.lat),
          billboard: {image: 'clt2.svg', width: 32, height: 62},
          markerData: marker 
        });
      });

    // Register a single click event handler
    viewer.screenSpaceEventHandler.setInputAction(function (click) {
        const pickedObject = viewer.scene.pick(click.position);

        // Check if a marker was clicked
        if (Cesium.defined(pickedObject)) {
          const clickedEntity = pickedObject.id;

          // Get the name from the clicked entity
          if (clickedEntity && clickedEntity.markerData && onMarkerClick) {
            onMarkerClick(clickedEntity.markerData);
          }
        }
      }, Cesium.ScreenSpaceEventType.LEFT_CLICK);

      viewer.screenSpaceEventHandler.setInputAction(()=> {
        // preventin default behaviour
      }, Cesium.ScreenSpaceEventType.LEFT_DOUBLE_CLICK);


      return () => {
        if (viewer && !viewer.isDestroyed()) {
          viewer.destroy();
        }
      };
    
      
        }, [markers, onMarkerClick]); 

  return <div id="cesiumContainer" style={{ height: '50vh', width: '50vw' }} />;
};

export default Globe;